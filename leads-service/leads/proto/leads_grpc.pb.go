// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/leads.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeadsServiceClient is the client API for LeadsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeadsServiceClient interface {
	AddLead(ctx context.Context, in *AddLeadRequest, opts ...grpc.CallOption) (*AddLeadResponse, error)
	UpdateLeadStatus(ctx context.Context, in *UpdateLeadStatusRequest, opts ...grpc.CallOption) (*UpdateLeadStatusResponse, error)
}

type leadsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeadsServiceClient(cc grpc.ClientConnInterface) LeadsServiceClient {
	return &leadsServiceClient{cc}
}

func (c *leadsServiceClient) AddLead(ctx context.Context, in *AddLeadRequest, opts ...grpc.CallOption) (*AddLeadResponse, error) {
	out := new(AddLeadResponse)
	err := c.cc.Invoke(ctx, "/leads.LeadsService/AddLead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadsServiceClient) UpdateLeadStatus(ctx context.Context, in *UpdateLeadStatusRequest, opts ...grpc.CallOption) (*UpdateLeadStatusResponse, error) {
	out := new(UpdateLeadStatusResponse)
	err := c.cc.Invoke(ctx, "/leads.LeadsService/UpdateLeadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeadsServiceServer is the server API for LeadsService service.
// All implementations must embed UnimplementedLeadsServiceServer
// for forward compatibility
type LeadsServiceServer interface {
	AddLead(context.Context, *AddLeadRequest) (*AddLeadResponse, error)
	UpdateLeadStatus(context.Context, *UpdateLeadStatusRequest) (*UpdateLeadStatusResponse, error)
	mustEmbedUnimplementedLeadsServiceServer()
}

// UnimplementedLeadsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeadsServiceServer struct {
}

func (UnimplementedLeadsServiceServer) AddLead(context.Context, *AddLeadRequest) (*AddLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLead not implemented")
}
func (UnimplementedLeadsServiceServer) UpdateLeadStatus(context.Context, *UpdateLeadStatusRequest) (*UpdateLeadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeadStatus not implemented")
}
func (UnimplementedLeadsServiceServer) mustEmbedUnimplementedLeadsServiceServer() {}

// UnsafeLeadsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeadsServiceServer will
// result in compilation errors.
type UnsafeLeadsServiceServer interface {
	mustEmbedUnimplementedLeadsServiceServer()
}

func RegisterLeadsServiceServer(s grpc.ServiceRegistrar, srv LeadsServiceServer) {
	s.RegisterService(&LeadsService_ServiceDesc, srv)
}

func _LeadsService_AddLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadsServiceServer).AddLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leads.LeadsService/AddLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadsServiceServer).AddLead(ctx, req.(*AddLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeadsService_UpdateLeadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeadsServiceServer).UpdateLeadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leads.LeadsService/UpdateLeadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeadsServiceServer).UpdateLeadStatus(ctx, req.(*UpdateLeadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeadsService_ServiceDesc is the grpc.ServiceDesc for LeadsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeadsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leads.LeadsService",
	HandlerType: (*LeadsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLead",
			Handler:    _LeadsService_AddLead_Handler,
		},
		{
			MethodName: "UpdateLeadStatus",
			Handler:    _LeadsService_UpdateLeadStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/leads.proto",
}
